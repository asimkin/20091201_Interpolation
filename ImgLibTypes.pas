{*******************************************************}
{                                                       }
{      Image Library for Bachelor Diploma Project       }
{               MSTU n.a. Bauman, ICS-1                 }
{           Copyright (c) 2009, Simkin A.V.             }
{                                                       }
{*******************************************************}
{         Library Version 0.8.7 from 25.04.2009         }
{*******************************************************}
{   'Variables, Constantes and Types' from 25.04.2009   }
{*******************************************************}
unit ImgLibTypes;
 { Модуль объявления типов, констант и переменных библиотеки }
interface {Открытый интерфейс модуля}

  uses
  ////////////////////////////////////////////////////////////
  // ИСПОЛЬЗУЕМЫЕ ВНЕШНИЕ МОДУЛИ
  //
  Windows; // системные модули

  type
  ////////////////////////////////////////////////////////////
  // ЭКСПОРТИРУЕМЫЕ ТИПЫ
  //
    //////////////////////////////////////////////////////
    // ОБЩИЕ И ОСНОВНЫЕ ТИПЫ
    //// Типовые и Основные массивы библиотеки ////
    // Указатели на основные типы
    PDouble = ^Double;
    // Типовые массивы
    TDBooleanArray      = array of Boolean;
    TDBoolean2Array     = array of TDBooleanArray;
    TDByteArray         = array of Byte;
    TDWordArray         = array of Word;
    TDCardinalArray     = array of Cardinal;
    TDIntegerArray      = array of LongInt;
    TDInteger2Array     = array of TDIntegerArray;
    TDDoubleArray       = array of Double;
    TDDouble2Array      = array of TDDoubleArray;
    TDStringArray       = array of String;
    TDString2Array      = array of TDStringArray;
    // Основные массивы (хранят различную информацию по изображению) //
    TImageArray         = array of TDByteArray;     // "Изображение" или Массив пикселей 8 битового изображения (монохромного)
    TImagesArray        = array of TImageArray;    // Массив изображений или массив массива пикселей
    TLevelsArray        = array[0..MAXBYTE] of Cardinal; // Массив распределения яркости изображения
    TBrightnessArray    = TDByteArray;                    // Массив значений яркостей изображения

    //// Основные записи библиотеки ////
    // Записи изображений
    TSymbol             = Record //запись символа
      img      : TImageArray; // изображение
      symbol   : Char;        // Соответсвующий символ
      hit      : Double;      // *100%, процент совпавших пикселей
      position : Word;        // позиция символа в оригинальном массиве
    End; // TSymbol
    // Записи параметров областей
    TPointPosition      = Record // Запись двухкоординатной Точки
      i, j: Cardinal // хранит 2 любых значения
    End; // TPointPosition
    TPointParameters    = Record // Запись Параметров точки
      gx,gy : Byte;   // градиент
      p     : Word;   // длина sqrt(gx^2+gy^2)
      fi    : Single; // угол arctan2(gy,gx)
    End; // TPointParameters
    TMargins = Record // Запись границ какой либо области
        right, buttom, left, top: Word;
    End; // TMargins

    //// Массивы Основных записей ////
    TSymbolsArray       = array of TSymbol;          // Массив содержащий записи символов
    TPointPosArray      = array of TPointPosition;   // Массив координат
    TPointPos2Array     = array of TPointPosArray;   // Массив массива координат
    TPointParArray      = array of TPointParameters; // Массив параметров координат
    TPointPar2Array     = array of TPointParArray;   // Двумерный массив параметров кординат

    //////////////////////////////////////////////////////
    // ТИПЫ РАСПОЗНАВАНИЯ
    //// Перечисляемые типы ////
    TSymbolSize         = (s32, s16, s8); // Перечисление размеров стороны символа (матрицы для распознавания)
    TCountryIndex       = (RUS); // Типы индекса страны номера
    //// Записи ////
    TRecognizeSetting   = Record // Запись настроек региона для распознавания номера
      MaxSymbols    : Byte;     // Максимальное количетсво символов в области распознавания
      MinSymbols    : Byte;     // Минимальное количетсво символов в области распознавания
      cfMaxRectangle: Double;   // Максимальное отношение ширины номера к высоте
      cfMinRectangle: Double;   // Минимальное отношение ширины номера к высоте
      cfSymbolWidth : Double;   // Соотношение ширины символа к высоте номера
      cfSymbolHeight: Double;   // Соотношение высоты символа к высоте номера
      cfSymbolSpace : Double;   // Соотношение ширины области пробела к высоте номера
      cfMaxBright   : Double;   // *100%, Значение в % от максимальной яркости удовлетворительной для нахождения максимума
      case CountryIndex: TCountryIndex of // вариантная часть записи
       RUS: ( // код региона (Россия)
             MinSeriesSymbols: Byte; // Минимальное кол. символов в области серии
             MinRegionSymbols: Byte; // Минимальное кол. символов в области региона
             cfSeriesMax: Double;    // Соотношение max ширины области серий к высоте номера
             cfSeriesMin: Double;    // Соотношение min ширины области серий к высоте номера
             cfRegionH: Double;      // Соотношение ширины области региона к высоте номера
             cfRegionW: Double;      // Соотношение высоты области региона к ее ширине
             cfLineW  : Double;      // Соотношение ширины области линии к высоте номера
             );
    End; // TRecognizeSetting
    //// Массивы ////
    TSizeSymbolsArray   = array[TSymbolSize] of TSymbolsArray; // Массив содержащий изображения символов по каждому размеру матрицы
    TCountrySettings    = array[TCountryIndex] of TRecognizeSetting; //массив настроек распознавания по каждой стране

    //////////////////////////////////////////////////////
    // ДОПОЛНИТЕЛЬНЫЕ ТИПЫ
    //// Основные типы работы с массивами ////
    // Перечисляемые типы
    TFindType           = (mLinear, mBinary); // Вариации алгоритма поиска в массиве
    TBWFilterType       = (fBlackMass, fFindMin);  // Типы BW Фильтра
    TSplineType         = (fLinear, fHermite, fCubic, fAkima, fBilinear, fBicubic, fBiakima); // Типы апроксимации
    TSmoothingType      = (fSevenNonLinear, fCubicSpline); // Типы сглаживания массива
    TResizeType         = (fAverageArea, fBilinearSpline, fBicubicSpline, fBiakimaSpline); // Типы фильтрации при изменении размера

  const
  ////////////////////////////////////////////////////////////
  // ОТКРЫТЫЕ КОНСТАНТЫ МОДУЛЯ
  //
    // Параметры распознавания //
    cAgreeHits          = 0.75; // *100%, Значение, при котором символ считается распознаным

  Var
  ////////////////////////////////////////////////////////////
  // ОТКРЫТЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
  //
    // Параметры распознавания //
    CountrySettings: TCountrySettings;

  ////////////////////////////////////////////////////////////
  // ОТКРЫТЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
  //
  function GetTSymbolSize(SymbolSize: TSymbolSize): Word; stdcall;

implementation {Реализация модуля}

////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОГО ЗАПОЛНЕНИЯ ДАННЫХ
//

// Процедура заполнения переменной CountrySettings начальными значениями
 procedure FillCountrySettings(); safecall;
 Var RecognizeSetting: TRecognizeSetting;
 Begin
  // RUS //
  with RecognizeSetting do
  begin
    CountryIndex      := RUS;
    MaxSymbols        := 9;
    MinSymbols        := 8;
    cfMaxRectangle    := 5.5;
    cfMinRectangle    := 4.0;
    MinSeriesSymbols  := 5;
    MinRegionSymbols  := 2;
    cfSymbolHeight    := 0.80;
    cfSymbolWidth     := 0.60; // 0.55
    cfSymbolSpace     := 0.20;
    cfSeriesMax       := 4.0;
    cfSeriesMin       := 3.0;
    cfMaxBright       := 0.88;
    cfRegionH         := 0.70;
    cfRegionW         := 2.0;
    cfLineW           := 0.08;
  end;
  CountrySettings[RUS] := RecognizeSetting;
 End; // FillCountrySettings();



////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТИПОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// ТИПЫ РАСПОЗНАВАНИЯ
//

// Функция возвращает значение размера для TSymbolSize
// !Функция может работать во втором варианте (см. комментарии)
// Параметры:
//  SymbolSize - Значение перечисляемого типа
// Возвращаемое значение:
//  Word - Значение размера
 function GetTSymbolSize(SymbolSize: TSymbolSize): Word;
 //var S: String;
 begin
   Result := 0;
   // 1ый вариант работы (более быстрый)
   case SymbolSize of
    s32: Result := 32;
    s16: Result := 16;
    s8 : Result := 8;
   end;
   {// 2ой вариант работы  // требует unit "TypInfo" в uses
   S      := GetEnumName(TypeInfo(TSymbolSize), Ord(SymbolSize));
   Result := StrToInt(Copy(S, 2, Length(S) - 1)); }
 end; // GetTSymbolSize();


initialization {Операторы выполняемые один раз при первом обращении к модулю}

 // заполняем переменную CountrySettings
 FillCountrySettings();

finalization {Операторы, выполняемые при любом завершении работы модуля}

end. // ImgLibTypes
